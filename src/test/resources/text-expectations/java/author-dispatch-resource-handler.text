package io.vlingo.xoomapp.resources;

import io.vlingo.xoom.actors.Definition;
import io.vlingo.xoom.actors.Address;
import io.vlingo.xoom.actors.Logger;
import io.vlingo.xoom.turbo.annotation.autodispatch.Handler;
import io.vlingo.xoom.turbo.ComponentRegistry;
import io.vlingo.xoom.common.Completes;
import io.vlingo.xoom.http.ContentType;
import io.vlingo.xoom.http.Response;
import io.vlingo.xoom.http.ResponseHeader;
import io.vlingo.xoom.http.resource.Resource;
import io.vlingo.xoom.http.resource.DynamicResourceHandler;
import io.vlingo.xoom.lattice.grid.Grid;
import io.vlingo.xoomapp.infrastructure.AuthorData;
import io.vlingo.xoomapp.infrastructure.persistence.AuthorQueries;
import io.vlingo.xoomapp.infrastructure.persistence.QueryModelStateStoreProvider;
import io.vlingo.xoomapp.model.Author;
import io.vlingo.xoomapp.model.AuthorEntity;

import static io.vlingo.xoom.common.serialization.JsonSerialization.serialized;
import static io.vlingo.xoom.http.Response.Status.*;
import static io.vlingo.xoom.http.ResponseHeader.Location;
import static io.vlingo.xoom.http.resource.ResourceBuilder.resource;

/**
 * See <a href="https://docs.vlingo.io/xoom-turbo/xoom-annotations#resourcehandlers">@ResourceHandlers</a>
 */
public class AuthorResourceHandler extends DynamicResourceHandler implements AuthorResource {
  private final Grid $stage;
  private final Logger $logger;
  private final AuthorQueries $queries;

  public AuthorResourceHandler(final Grid grid) {
      super(grid.world().stage());
      this.$stage = grid;
      this.$logger = super.logger();
      this.$queries = ComponentRegistry.withType(QueryModelStateStoreProvider.class).authorQueries;
  }

  public Completes<Response> changeAuthorName(final String id, final AuthorData authorData) {
    return resolve(authorId)
            .andThenTo(author -> AuthorHandlers.changeAuthorNameHandler.handler.handle(author,authorData))
            .andThenTo(state -> Completes.withSuccess(entityResponseOf(Ok, serialized(AuthorHandlers.adaptStateHandler.handler.handle(state)))))
            .otherwise(arg -> Response.of(NotFound))
            .recoverFrom(e -> Response.of(InternalServerError, e.getMessage()));
  }

  public Completes<Response> queryById(final String id) {
    return AuthorHandlers.queryByIdHandler.handler.handle(id, authorQueries)
            .andThenTo(data -> Completes.withSuccess(entityResponseOf(Ok, serialized(data))))
            .otherwise(arg -> Response.of(NotFound))
            .recoverFrom(e -> Response.of(InternalServerError, e.getMessage()));
  }

  @Override
  public Resource<?> routes() {
     return resource("AuthorResourceHandler",
        io.vlingo.xoom.http.resource.ResourceBuilder.patch("/authors/{id}/name")
            .param(String.class)
            .body(io.vlingo.xoomapp.infrastructure.AuthorData.class)
            .handle(this::changeAuthorName),
        io.vlingo.xoom.http.resource.ResourceBuilder.get("/authors/{id}")
            .param(String.class)
            .handle(this::queryById)
     );
  }

  @Override
  protected ContentType contentType() {
    return ContentType.of("application/json", "charset=UTF-8");
  }

  private String location(final String id) {
    return "/authors/" + id;
  }

  private Completes<io.vlingo.xoomapp.model.Author> resolve(final String id) {
    final Address address = $stage.addressFactory().from(id);
    return $stage.actorOf(io.vlingo.xoomapp.model.Author.class, address, Definition.has(io.vlingo.xoomapp.model.AuthorEntity.class, Definition.parameters(id)));
  }

}
